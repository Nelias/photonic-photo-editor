{"version":3,"sources":["enums/enums.tsx","components/title.tsx","components/image-section.tsx","components/photo-editor.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ButtonColor","Title","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","className","name","Component","ImageSection","type","onChange","handleImageInput","src","editorState","file","style","transform","concat","liveRotation","filter","blur","brightness","contrast","grayscale","hue","invert","opacity","saturate","sepia","PhotoEditor","_this","reset","setState","pixelCount","rotation","buttonColor","Black","event","state","URL","revokeObjectURL","target","files","undefined","createObjectURL","countPixels","handleRotationInput","value","turnGrey","White","turnImageRight","turnImageLeft","image","document","querySelector","naturalWidth","naturalHeight","_this2","Number","currentTarget","defineProperty","_this3","components_image_section","placeholder","onClick","disabled","min","max","handleFilterInput","App","title","photo_editor","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0332877e.chunk.js","sourcesContent":["export enum ButtonColor {\n    Black = 'black-button',\n    White = 'white-button',\n}\n\n","import React, { Component } from 'react';\n\ninterface TitleProps {\n    name: string\n}\n\nclass Title extends Component<TitleProps, string> {\n\n    constructor(props: TitleProps) {\n        super(props);\n    }\n    \n    render() {\n        return(\n            <h1 className=\"title\">{this.props.name}</h1>\n        )\n    }\n}\n\nexport default Title;\n\n","import React, { Component } from 'react';\nimport '../styles/image-section.css';\n \nclass ImageSection extends Component<any, any> {\n\n    constructor(props: any) {\n        super(props);\n    }\n \n    render() {\n        return (\n            <div className=\"upload-image-section\">\n                   \n                <input\n                className=\"image-input\"\n                type=\"file\"\n                onChange={this.props.handleImageInput}/>\n\n                <div className=\"image-container\">\n                    <img\n                        src={this.props.editorState.file}\n                        className=\"uploaded-image\"\n                        style={{\n                            transform: `rotate(${this.props.editorState.liveRotation}deg)`, \n                            filter: `blur(${this.props.editorState.blur}px) \n                            brightness(${this.props.editorState.brightness}%) \n                            contrast(${this.props.editorState.contrast}%) \n                            grayscale(${this.props.editorState.grayscale}%) \n                            hue-rotate(${this.props.editorState.hue}deg) \n                            invert(${this.props.editorState.invert}%) \n                            opacity(${this.props.editorState.opacity}%) \n                            saturate(${this.props.editorState.saturate}%) \n                            sepia(${this.props.editorState.sepia}%)`\n                        }}\n                    />\n                </div>\n                \n            </div>\n        );\n    }\n\n}\n \nexport default ImageSection;\n\n","import React, { Component } from 'react';\nimport ImageSection from './image-section';\nimport { ButtonColor } from '../enums/enums';\nimport { FilterInput, EditorState } from '../interfaces/interfaces';\n\nimport '../styles/buttons.css';\nimport '../styles/options-section.css';\n \nclass PhotoEditor extends Component<{}, EditorState> {\n \n    constructor(props: {}) {\n        super(props);\n        this.state = {\n            file: null,\n            pixelCount: null,\n            rotation: \"\",\n            liveRotation: 0,\n            blur: 0,\n            brightness: 100,\n            contrast: 100,\n            grayscale: 0,\n            hue: 0,\n            invert: 0,\n            opacity: 100,\n            saturate: 100,\n            sepia: 0,\n            buttonColor: ButtonColor.Black\n        };\n    }\n \n    reset = () => {\n        this.setState({\n            pixelCount: null,\n            rotation: \"\",\n            liveRotation: 0,\n            blur: 0,\n            brightness: 100,\n            contrast: 100,\n            grayscale: 0,\n            hue: 0,\n            invert: 0,\n            opacity: 100,\n            saturate: 100,\n            sepia: 0,\n            buttonColor: ButtonColor.Black\n        })\n    };\n \n    handleImageInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (this.state.file !== null) {\n            URL.revokeObjectURL(this.state.file);\n        }\n \n        // prevents app from crashing when file upload is canceled\n        const hasFiles = event.target.files && event.target.files[0] !== undefined;\n        \n        if (hasFiles) {\n            const file = event.target.files && event.target.files[0];\n            this.setState({\n                file: URL.createObjectURL(file),\n            });\n            this.countPixels();\n            this.reset();\n        }\n    };\n \n    handleFilterInput(name: keyof FilterInput): (event: React.ChangeEvent<HTMLInputElement>) => void {\n        return (event: React.ChangeEvent<HTMLInputElement>): void => {\n            const value = Number(event.currentTarget.value);\n \n            const state = {\n                [name]: value\n            } as {[name in keyof FilterInput]: typeof value};\n \n            this.setState(state);\n        }\n    };\n \n    handleRotationInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            rotation: event.target.value\n        })\n    };\n \n    turnGrey = () => {\n        if (this.state.grayscale === 0) {\n            this.setState({\n                grayscale: 100,\n                buttonColor: ButtonColor.White,\n            })\n        } else {\n            this.setState({\n                grayscale: 0,\n                buttonColor: ButtonColor.Black,\n            })\n        }\n    };\n \n    turnImageRight = () => {\n        if (this.state.rotation === \"\") {\n            this.setState({\n                liveRotation: `90`\n            })\n        } else {\n            this.setState({\n                liveRotation: this.state.rotation\n            })\n        }\n    };\n \n    turnImageLeft = () => {\n        if (this.state.rotation === \"\") {\n            this.setState({\n                liveRotation: `-90`\n            })\n        } else {\n            this.setState({\n                liveRotation: `-${this.state.rotation}`\n            })\n        }\n    };\n \n    countPixels = () => {\n        if (this.state.file !== null) {\n            let image =  document.querySelector(\".uploaded-image\") as HTMLImageElement;\n            this.setState({\n                pixelCount: image.naturalWidth * image.naturalHeight\n            })\n        }\n    };\n \n    render() {\n        return (\n            <div className=\"photo-editor\">\n                <ImageSection editorState={this.state} handleImageInput={this.handleImageInput} />\n\n                <div className=\"options-section\">\n                    <div className=\"options-panel\">\n                        <input \n                            className=\"main-button rotation-input\" \n                            value={this.state.rotation} \n                            type=\"number\" \n                            placeholder=\"rotation angle\" \n                            onChange={event => this.handleRotationInput(event)}\n                        />\n                        <button className=\"main-button\" onClick={this.turnImageLeft}>Turn Left &#8630;</button>\n                        <button className=\"main-button\" onClick={this.turnImageRight}>Turn Right &#8631;</button>\n                    </div>\n                    <div>\n                        <button className={`main-button ${this.state.buttonColor}`} onClick={this.turnGrey}>\n                            Black &amp; White\n                        </button>\n                    </div>\n                    <div>\n                        <button className=\"main-button\" onClick={this.countPixels} disabled={!this.state.file}>\n                            Count Pixels: {this.state.pixelCount}\n                        </button>\n                    </div>\n                    <div className=\"filter-panel\">\n                        <label className=\"filter-panel__label\">Brightness</label>\n                        <input \n                            className=\"filter-panel__range\" \n                            type=\"range\" min=\"0\" max=\"200\" \n                            onChange={this.handleFilterInput('brightness')} \n                            value={this.state.brightness}\n                        />\n                        <label className=\"filter-panel__label\">Contrast</label>\n                        <input \n                            className=\"filter-panel__range\" \n                            type=\"range\" min=\"0\" max=\"200\" \n                            onChange={this.handleFilterInput('contrast')} \n                            value={this.state.contrast}\n                        />\n                        <label className=\"filter-panel__label\">Saturation</label>\n                        <input \n                            className=\"filter-panel__range\" \n                            type=\"range\" min=\"0\" max=\"200\" \n                            onChange={this.handleFilterInput('saturate')} \n                            value={this.state.saturate}\n                        />\n                        <label className=\"filter-panel__label\">Hue</label>\n                        <input \n                            className=\"filter-panel__range\" \n                            type=\"range\" min=\"0\" max=\"360\" \n                            onChange={this.handleFilterInput('hue')} \n                            value={this.state.hue}\n                        />\n                        <label className=\"filter-panel__label\">Invert</label>\n                        <input \n                            className=\"filter-panel__range\" \n                            type=\"range\" min=\"0\" max=\"100\" \n                            onChange={this.handleFilterInput('invert')} \n                            value={this.state.invert}\n                        />\n                        <label className=\"filter-panel__label\">Opacity</label>\n                        <input \n                            className=\"filter-panel__range\" \n                            type=\"range\" min=\"0\" max=\"100\" \n                            onChange={this.handleFilterInput('opacity')} \n                            value={this.state.opacity}\n                        />\n                        <label className=\"filter-panel__label\">Sepia</label>\n                        <input \n                            className=\"filter-panel__range\" \n                            type=\"range\" min=\"0\" max=\"100\" \n                            onChange={this.handleFilterInput('sepia')} \n                            value={this.state.sepia}\n                        />\n                        <label className=\"filter-panel__label\">Blur</label>\n                        <input \n                            className=\"filter-panel__range\" \n                            type=\"range\" min=\"0\" max=\"100\" \n                            onChange={this.handleFilterInput('blur')} \n                            value={this.state.blur}\n                        />\n                    </div>\n                    <div>\n                        <button className=\"main-button reset-button\" onClick={this.reset}>RESET</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n \nexport default PhotoEditor;\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport Title from './components/title';\nimport PhotoEditor from './components/photo-editor';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Title name=\"Photonic Photo Editor\" />\n        <PhotoEditor />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}